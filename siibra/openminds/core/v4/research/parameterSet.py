# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/HumanBrainProject/openMINDS/dbb4c54/v3/core/v4/research/parameterSet.schema.json
#   timestamp: 2021-11-25T12:27:20+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class ValueItem(BaseModel):
    typeOfUncertainty: Optional[Any] = Field(
        None,
        description='Distinct technique used to quantify the uncertainty of a measurement.',
        title='typeOfUncertainty',
    )
    uncertainty: Optional[List[float]] = Field(
        None,
        description='Quantitative value range defining the uncertainty of a measurement.',
        max_items=2,
        min_items=2,
        title='uncertainty',
    )
    unit: Optional[Any] = Field(
        None,
        description='Determinate quantity adopted as a standard of measurement.',
        title='unit',
    )
    value: float = Field(..., description='Entry for a property.', title='value')


class ValueItem1(BaseModel):
    maxValue: float = Field(
        ..., description='Greatest quantity attained or allowed.', title='maxValue'
    )
    maxValueUnit: Optional[Any] = Field(None, title='maxValueUnit')
    minValue: float = Field(
        ..., description='Smallest quantity attained or allowed.', title='minValue'
    )
    minValueUnit: Optional[Any] = Field(None, title='minValueUnit')


class ParameterItem(BaseModel):
    name: str = Field(
        ...,
        description='Word or phrase that constitutes the distinctive designation of a being or thing.',
        title='name',
    )
    value: Union[ValueItem, ValueItem1]


class ParameterItem1(BaseModel):
    name: str = Field(
        ...,
        description='Word or phrase that constitutes the distinctive designation of a being or thing.',
        title='name',
    )
    value: str = Field(..., description='Entry for a property.', title='value')


class Model(BaseModel):
    _id: str = Field(..., alias='@id', description='Metadata node identifier.')
    _type: str = Field(..., alias='@type')
    context: str = Field(
        ..., alias='https://openminds.ebrains.eu/vocab/context', title='context'
    )
    parameter: Union[ParameterItem, ParameterItem1] = Field(
        ..., alias='https://openminds.ebrains.eu/vocab/parameter'
    )
    relevantFor: Dict[str, Any] = Field(
        ...,
        alias='https://openminds.ebrains.eu/vocab/relevantFor',
        description='Reference to what or whom something or someone bears siginificance.',
        title='relevantFor',
    )
