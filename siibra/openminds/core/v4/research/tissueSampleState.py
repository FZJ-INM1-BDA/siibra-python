# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/HumanBrainProject/openMINDS/dbb4c54/v3/core/v4/research/tissueSampleState.schema.json
#   timestamp: 2021-11-25T12:27:24+00:00

from __future__ import annotations

from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field


class AgeItem(BaseModel):
    typeOfUncertainty: Optional[Any] = Field(
        None,
        description='Distinct technique used to quantify the uncertainty of a measurement.',
        title='typeOfUncertainty',
    )
    uncertainty: Optional[List[float]] = Field(
        None,
        description='Quantitative value range defining the uncertainty of a measurement.',
        max_items=2,
        min_items=2,
        title='uncertainty',
    )
    unit: Optional[Any] = Field(
        None,
        description='Determinate quantity adopted as a standard of measurement.',
        title='unit',
    )
    value: float = Field(..., description='Entry for a property.', title='value')


class AgeItem1(BaseModel):
    maxValue: float = Field(
        ..., description='Greatest quantity attained or allowed.', title='maxValue'
    )
    maxValueUnit: Optional[Any] = Field(None, title='maxValueUnit')
    minValue: float = Field(
        ..., description='Smallest quantity attained or allowed.', title='minValue'
    )
    minValueUnit: Optional[Any] = Field(None, title='minValueUnit')


class WeightItem(BaseModel):
    typeOfUncertainty: Optional[Any] = Field(
        None,
        description='Distinct technique used to quantify the uncertainty of a measurement.',
        title='typeOfUncertainty',
    )
    uncertainty: Optional[List[float]] = Field(
        None,
        description='Quantitative value range defining the uncertainty of a measurement.',
        max_items=2,
        min_items=2,
        title='uncertainty',
    )
    unit: Optional[Any] = Field(
        None,
        description='Determinate quantity adopted as a standard of measurement.',
        title='unit',
    )
    value: float = Field(..., description='Entry for a property.', title='value')


class WeightItem1(BaseModel):
    maxValue: float = Field(
        ..., description='Greatest quantity attained or allowed.', title='maxValue'
    )
    maxValueUnit: Optional[Any] = Field(None, title='maxValueUnit')
    minValue: float = Field(
        ..., description='Smallest quantity attained or allowed.', title='minValue'
    )
    minValueUnit: Optional[Any] = Field(None, title='minValueUnit')


class Model(BaseModel):
    _id: str = Field(..., alias='@id', description='Metadata node identifier.')
    _type: str = Field(..., alias='@type')
    additionalRemarks: Optional[str] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/additionalRemarks',
        description='Mention of what deserves additional attention or notice.',
        title='additionalRemarks',
    )
    age: Optional[Union[AgeItem, AgeItem1]] = Field(
        None, alias='https://openminds.ebrains.eu/vocab/age'
    )
    attribute: Optional[List[Any]] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/attribute',
        min_items=1,
        title='attribute',
    )
    descendedFrom: Optional[List[Any]] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/descendedFrom',
        min_items=1,
        title='descendedFrom',
    )
    lookupLabel: Optional[str] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/lookupLabel',
        title='lookupLabel',
    )
    pathology: Optional[List[Any]] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/pathology',
        description='Structural and functional deviation from the normal that constitutes a disease or characterizes a particular disease.',
        min_items=1,
        title='pathology',
    )
    weight: Optional[Union[WeightItem, WeightItem1]] = Field(
        None, alias='https://openminds.ebrains.eu/vocab/weight'
    )
