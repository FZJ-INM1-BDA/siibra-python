# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/HumanBrainProject/openMINDS/dbb4c54/v3/SANDS/v3/atlas/parcellationTerminology.schema.json
#   timestamp: 2021-11-25T14:29:04+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field


class Model(BaseModel):
    _id: str = Field(..., alias='@id', description='Metadata node identifier.')
    _type: str = Field(..., alias='@type')
    defined_in: Optional[List[Any]] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/definedIn',
        description='Reference to a file instance in which something is stored.',
        min_items=1,
        title='definedIn',
    )
    full_name: Optional[str] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/fullName',
        description='Whole, non-abbreviated name of something or somebody.',
        title='fullName',
    )
    has_entity: List[Any] = Field(
        ...,
        alias='https://openminds.ebrains.eu/vocab/hasEntity',
        min_items=1,
        title='hasEntity',
    )
    ontology_identifier: Optional[List[str]] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/ontologyIdentifier',
        description='Term or code used to identify something or someone registered within a particular ontology.',
        min_items=1,
        title='ontologyIdentifier',
    )
    short_name: str = Field(
        ...,
        alias='https://openminds.ebrains.eu/vocab/shortName',
        description='Shortened or fully abbreviated name of something or somebody.',
        title='shortName',
    )
