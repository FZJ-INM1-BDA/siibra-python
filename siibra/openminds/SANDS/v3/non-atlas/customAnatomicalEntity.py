# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/HumanBrainProject/openMINDS/dbb4c54/v3/SANDS/v3/non-atlas/customAnatomicalEntity.schema.json
#   timestamp: 2021-11-25T12:26:50+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, constr


class Coordinates(BaseModel):
    typeOfUncertainty: Optional[Any] = Field(
        None,
        description='Distinct technique used to quantify the uncertainty of a measurement.',
        title='typeOfUncertainty',
    )
    uncertainty: Optional[List[float]] = Field(
        None,
        description='Quantitative value range defining the uncertainty of a measurement.',
        max_items=2,
        min_items=2,
        title='uncertainty',
    )
    unit: Optional[Any] = Field(
        None,
        description='Determinate quantity adopted as a standard of measurement.',
        title='unit',
    )
    value: float = Field(..., description='Entry for a property.', title='value')


class BestViewPoint(BaseModel):
    coordinateSpace: Any = Field(
        ...,
        description='Two or three dimensional geometric setting.',
        title='coordinateSpace',
    )
    coordinates: Coordinates = Field(
        ..., description='Structured information on a quantitative value.'
    )


class HasAnnotation(BaseModel):
    bestViewPoint: Optional[BestViewPoint] = Field(
        None, description='Structured information on a coordinate point.'
    )
    coordinateSpace: Any = Field(
        ...,
        description='Two or three dimensional geometric setting.',
        title='coordinateSpace',
    )
    criteria: Optional[Any] = Field(
        None,
        description='Aspects or standards on which a judgement or decision is based.',
        title='criteria',
    )
    criteriaQualityType: Any = Field(
        ...,
        description='Distinct class that defines how the judgement or decision was made for a particular criteria.',
        title='criteriaQualityType',
    )
    displayColor: Optional[constr(regex=r'^#[0-9A-Fa-f]{6}$')] = Field(
        None, description='Preferred coloring.', title='displayColor'
    )
    inspiredBy: Optional[List] = Field(
        None,
        description='Reference to an inspiring element.',
        min_items=1,
        title='inspiredBy',
    )
    internalIdentifier: str = Field(
        ...,
        description='Term or code that identifies someone or something within a particular product.',
        title='internalIdentifier',
    )
    laterality: Optional[List] = Field(
        None,
        description='Differentiation between a pair of lateral homologous parts of the body.',
        max_items=2,
        min_items=1,
        title='laterality',
    )
    visualizedIn: Any = Field(
        ...,
        description='Reference to an image in which something is visible.',
        title='visualizedIn',
    )


class RelationAssessmentItem(BaseModel):
    criteria: Optional[Any] = Field(
        None,
        description='Aspects or standards on which a judgement or decision is based.',
        title='criteria',
    )
    inRelationTo: Any = Field(
        ..., description='Reference to a related element.', title='inRelationTo'
    )
    qualitativeOverlap: Any = Field(
        ...,
        description='Semantic characterization of how much two things occupy the same space.',
        title='qualitativeOverlap',
    )


class QuantitativeOverlapItem(BaseModel):
    typeOfUncertainty: Optional[Any] = Field(
        None,
        description='Distinct technique used to quantify the uncertainty of a measurement.',
        title='typeOfUncertainty',
    )
    uncertainty: Optional[List[float]] = Field(
        None,
        description='Quantitative value range defining the uncertainty of a measurement.',
        max_items=2,
        min_items=2,
        title='uncertainty',
    )
    unit: Optional[Any] = Field(
        None,
        description='Determinate quantity adopted as a standard of measurement.',
        title='unit',
    )
    value: float = Field(..., description='Entry for a property.', title='value')


class QuantitativeOverlapItem1(BaseModel):
    maxValue: float = Field(
        ..., description='Greatest quantity attained or allowed.', title='maxValue'
    )
    maxValueUnit: Optional[Any] = Field(None, title='maxValueUnit')
    minValue: float = Field(
        ..., description='Smallest quantity attained or allowed.', title='minValue'
    )
    minValueUnit: Optional[Any] = Field(None, title='minValueUnit')


class RelationAssessmentItem1(BaseModel):
    criteria: Optional[Any] = Field(
        None,
        description='Aspects or standards on which a judgement or decision is based.',
        title='criteria',
    )
    inRelationTo: Any = Field(
        ..., description='Reference to a related element.', title='inRelationTo'
    )
    quantitativeOverlap: Union[QuantitativeOverlapItem, QuantitativeOverlapItem1]


class Model(BaseModel):
    _id: str = Field(..., alias='@id', description='Metadata node identifier.')
    _type: str = Field(..., alias='@type')
    hasAnnotation: Optional[HasAnnotation] = Field(
        None, alias='https://openminds.ebrains.eu/vocab/hasAnnotation'
    )
    name: str = Field(
        ...,
        alias='https://openminds.ebrains.eu/vocab/name',
        description='Word or phrase that constitutes the distinctive designation of a being or thing.',
        title='name',
    )
    relatedUBERONTerm: Optional[Dict[str, Any]] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/relatedUBERONTerm',
        title='relatedUBERONTerm',
    )
    relationAssessment: Optional[
        Union[RelationAssessmentItem, RelationAssessmentItem1]
    ] = Field(None, alias='https://openminds.ebrains.eu/vocab/relationAssessment')
