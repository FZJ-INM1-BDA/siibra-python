# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/HumanBrainProject/openMINDS/dbb4c54/v3/SANDS/v3/non-atlas/customAnnotation.schema.json
#   timestamp: 2021-11-25T12:26:50+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, constr


class Coordinates(BaseModel):
    typeOfUncertainty: Optional[Any] = Field(
        None,
        description='Distinct technique used to quantify the uncertainty of a measurement.',
        title='typeOfUncertainty',
    )
    uncertainty: Optional[List[float]] = Field(
        None,
        description='Quantitative value range defining the uncertainty of a measurement.',
        max_items=2,
        min_items=2,
        title='uncertainty',
    )
    unit: Optional[Any] = Field(
        None,
        description='Determinate quantity adopted as a standard of measurement.',
        title='unit',
    )
    value: float = Field(..., description='Entry for a property.', title='value')


class BestViewPoint(BaseModel):
    coordinateSpace: Any = Field(
        ...,
        description='Two or three dimensional geometric setting.',
        title='coordinateSpace',
    )
    coordinates: Coordinates = Field(
        ..., description='Structured information on a quantitative value.'
    )


class Model(BaseModel):
    _id: str = Field(..., alias='@id', description='Metadata node identifier.')
    _type: str = Field(..., alias='@type')
    bestViewPoint: Optional[BestViewPoint] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/bestViewPoint',
        description='Structured information on a coordinate point.',
    )
    coordinateSpace: Dict[str, Any] = Field(
        ...,
        alias='https://openminds.ebrains.eu/vocab/coordinateSpace',
        description='Two or three dimensional geometric setting.',
        title='coordinateSpace',
    )
    criteria: Optional[Dict[str, Any]] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/criteria',
        description='Aspects or standards on which a judgement or decision is based.',
        title='criteria',
    )
    criteriaQualityType: Dict[str, Any] = Field(
        ...,
        alias='https://openminds.ebrains.eu/vocab/criteriaQualityType',
        description='Distinct class that defines how the judgement or decision was made for a particular criteria.',
        title='criteriaQualityType',
    )
    displayColor: Optional[constr(regex=r'^#[0-9A-Fa-f]{6}$')] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/displayColor',
        description='Preferred coloring.',
        title='displayColor',
    )
    inspiredBy: Optional[List[Any]] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/inspiredBy',
        description='Reference to an inspiring element.',
        min_items=1,
        title='inspiredBy',
    )
    internalIdentifier: str = Field(
        ...,
        alias='https://openminds.ebrains.eu/vocab/internalIdentifier',
        description='Term or code that identifies someone or something within a particular product.',
        title='internalIdentifier',
    )
    laterality: Optional[List[Any]] = Field(
        None,
        alias='https://openminds.ebrains.eu/vocab/laterality',
        description='Differentiation between a pair of lateral homologous parts of the body.',
        max_items=2,
        min_items=1,
        title='laterality',
    )
    visualizedIn: Dict[str, Any] = Field(
        ...,
        alias='https://openminds.ebrains.eu/vocab/visualizedIn',
        description='Reference to an image in which something is visible.',
        title='visualizedIn',
    )
